// Code generated by go-bindata.
// sources:
// static/default-pages/.DS_Store
// static/default-pages/404/404.html
// static/default-pages/700/700.html
// static/default-pages/favicon.ico
// static/default-pages/style.css
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticDefaultPagesDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\xbf\xaa\xc2\x30\x1c\xc5\xf1\xf3\x4b\x3b\x04\xee\x92\xf1\x8e\x59\xee\x7e\x85\x3e\x40\x28\xf5\x09\xfa\x02\x0e\x82\x8b\x54\x10\x74\xee\xa3\x4b\xc8\x19\x82\x62\x37\xb1\xca\xf9\x2c\x5f\xe9\x1f\x95\x0e\xcd\x1f\x00\xd6\x5f\xf6\x1b\x20\x00\xf0\x28\xc5\x1f\x1e\x19\x80\x06\x1d\xfe\xd1\x5d\xc7\xf3\x74\x3c\x4d\x07\x1e\x05\x5c\x75\x8d\xe5\xef\xb8\x3b\x2f\x22\x22\x22\xeb\xc3\x51\xda\xff\xbc\xfb\x8f\x88\xc8\xea\xe4\xf7\x43\x64\x13\x3b\x97\x1a\xcf\x3b\xb6\xad\xee\x09\x6c\x64\x13\x3b\x97\x1a\xaf\x73\x6c\xcb\x7a\x36\xb0\x91\x4d\xec\x5c\xca\x97\x96\x71\xf1\x61\xfc\x65\xf3\x6c\x60\x23\x9b\x5e\xf3\x6c\x44\x3e\x5d\x53\x12\xf2\xf8\xbf\x7d\xb2\xfe\x17\x91\xef\x66\xed\x30\x0e\xfd\xc2\xb6\x5d\x3e\xbe\xab\x3e\x2f\x4d\x02\x5c\xd9\x50\xfc\xad\xee\xd5\x44\x40\x64\x65\x6e\x01\x00\x00\xff\xff\x9d\x64\xae\x04\x04\x18\x00\x00")

func staticDefaultPagesDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_staticDefaultPagesDs_store,
		"static/default-pages/.DS_Store",
	)
}

func staticDefaultPagesDs_store() (*asset, error) {
	bytes, err := staticDefaultPagesDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/default-pages/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1516564274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticDefaultPages404404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\x13\x31\x10\xbd\xf7\x2b\x06\x0b\x71\x62\xb3\x54\xea\x01\x51\xef\x4a\xa8\x70\x2d\x15\x2a\x87\x1e\x1d\x7b\x12\xbb\xf5\x7a\x96\xf5\xb8\xe9\x2a\xca\x95\xbf\xe0\x27\xf8\x10\x3e\x82\x2f\x41\xf6\x6e\x68\x69\x23\x54\x4e\xd9\x99\x79\xf3\x34\xf3\x9e\x27\xf2\xc5\x87\x4f\x67\x97\x57\x17\x1f\xc1\x72\xe7\xdb\x23\x99\x7f\xc0\xab\xb0\x6e\x04\x06\x91\x13\xa8\x4c\x7b\x04\x00\x20\x3b\x64\x05\x96\xb9\xaf\xf0\x6b\x72\xb7\x8d\x38\xa3\xc0\x18\xb8\xe2\xb1\x47\x01\x7a\x8a\x1a\xc1\x78\xc7\x75\x26\x3a\x05\x6d\xd5\x10\x91\x9b\xc4\xab\xea\xad\x98\x79\xbc\x0b\x37\x30\xa0\x6f\x44\xe4\xd1\x63\xb4\x88\x2c\x20\x93\xcc\xbd\x3a\x46\x01\x76\xc0\x55\x23\xea\xc8\x8a\x9d\xae\x0d\xae\x54\xf2\x5c\xf5\x6a\x8d\xb1\x2e\x7d\x8b\x02\xeb\xd0\x38\xd5\x08\xe5\xbd\xa8\x67\x7e\x76\xec\xb1\xfd\x12\x6e\x02\x6d\x02\x5c\x28\xb6\xf0\xaa\x73\xc6\x10\x9f\xc2\x76\xbb\xb8\x18\xe8\x1a\x35\x9f\xab\x0e\x77\x3b\x59\x4f\xe8\x23\x59\x4f\x9b\xca\x25\x99\x71\x26\xca\x19\x1c\xa6\xa0\x24\x8c\xbb\x05\xed\x55\x8c\x8d\x18\x68\x23\xee\x2b\x8f\xab\x9e\xd6\xf4\xa8\x5c\x20\xb1\x57\xe1\x21\xa6\x72\x9a\x82\x68\x7f\x7d\xff\x26\xeb\x5c\x7b\x4e\x4b\x96\x48\xb4\x3f\x7f\x0c\x89\xf1\x50\x97\xac\x8d\xbb\x7d\x30\xf4\x7d\x38\xed\xb8\xdf\x48\x76\xca\xfd\x61\xce\xdf\xd5\xec\x60\xd5\xab\x81\x9d\xf6\x58\x5d\x47\x71\x78\xfb\x87\xf0\x7f\xc8\xf0\x54\xa4\x49\xd7\xe3\x3d\xc0\x85\x15\x55\xc5\x01\xd1\x9e\xbc\x39\x91\xb5\x3d\x3e\x80\xef\xdb\x73\x62\xeb\xc2\x1a\x36\x08\x5a\x05\x30\x04\x6a\x49\x89\xc1\xf1\x02\xde\x7b\xb6\x94\xd6\xf6\x35\xb0\x75\x11\xfa\xec\xb7\xd4\x64\xb0\xcd\x66\x2b\xb6\xd9\xe5\x12\x97\xde\x25\x82\x1e\x50\x31\x1a\x58\x8e\x80\x77\xa8\x13\x67\x6a\xb6\x08\x2b\xf2\x9e\x36\x39\xd2\xd4\x75\x2a\x98\x77\xb2\xee\x0f\x0c\x54\xd8\x5e\xc2\x32\x5b\x00\xca\x18\xc0\x60\x7a\x72\x81\xa1\x0a\xaa\xc3\x46\x6c\xb7\x8b\xcf\x2a\x18\xea\xce\x29\x85\xdd\x4e\x40\x95\xc7\x2a\xf9\x69\x22\x31\x8f\xf4\x6c\xe7\xb2\xe2\xf3\xf7\x8a\x88\xff\xe3\x59\x96\x17\x72\x39\x49\xb3\x46\x70\x41\xfb\x64\xf2\x8e\x8e\xe3\xfe\x68\x41\x05\x03\xe5\xaa\x60\xe3\xbc\x87\x40\x9c\x85\x32\x2e\xf6\x5e\x8d\x68\x9e\x48\x40\x01\x46\x4a\x03\xf4\x03\x99\xa4\xd9\x51\x80\xe8\x18\xe3\x02\xae\x28\x41\x97\x22\x43\xec\x51\xbb\xd5\x38\xe1\x74\x8a\x4c\x1d\xcc\x67\x5c\x26\x89\x8b\xc7\xaf\xf7\xaf\x85\xf7\x5b\xca\x7a\xba\x48\x59\xfe\x52\xda\xdf\x01\x00\x00\xff\xff\x9b\x38\x87\x2c\xb2\x04\x00\x00")

func staticDefaultPages404404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticDefaultPages404404Html,
		"static/default-pages/404/404.html",
	)
}

func staticDefaultPages404404Html() (*asset, error) {
	bytes, err := staticDefaultPages404404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/default-pages/404/404.html", size: 1202, mode: os.FileMode(420), modTime: time.Unix(1516593901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticDefaultPages700700Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4b\x72\xd4\x30\x10\xdd\xe7\x14\x8d\x16\xec\x6c\x4d\xb2\xa2\x88\xec\x4d\x60\x09\x64\x91\x2a\x2a\x4b\x8d\xd4\x63\x2b\xc8\x92\x51\xb7\x93\xb8\xa6\xb2\xe5\x16\x5c\x82\x83\x70\x08\x4e\x42\xc9\x9f\x24\x24\x53\xd4\xcc\x66\x24\xf5\xeb\xe7\xee\xd7\xaf\xd5\x9b\x0f\x5f\x2e\xae\xae\x2f\x3f\x42\xcb\x9d\xaf\x4f\x54\xfe\x03\xaf\x43\x53\x09\x0c\x22\x3f\xa0\xb6\xf5\x09\x00\x80\xea\x90\x35\xb4\xcc\x7d\x81\xdf\x07\x77\x5b\x89\x8b\x18\x18\x03\x17\x3c\xf6\x28\xc0\xcc\xb7\x4a\x30\xde\xb3\xcc\x44\xe7\x60\x5a\x9d\x08\xb9\x1a\x78\x57\xbc\x13\x0b\x8f\x77\xe1\x1b\x24\xf4\x95\x20\x1e\x3d\x52\x8b\xc8\x02\x32\xc9\x92\x6b\x88\x04\xb4\x09\x77\x95\x90\xc4\x9a\x9d\x91\x16\x77\x7a\xf0\x5c\xf4\xba\x41\x92\x53\x5e\x39\xc1\x3a\xb4\x4e\x57\x42\x7b\x2f\xe4\xc2\xcf\x8e\x3d\xd6\x5f\xd1\x9b\xd8\x21\xbc\xed\x9c\xb5\x91\xcf\x61\xbf\x2f\x2f\x53\xbc\x41\xc3\x9f\x75\x87\x0f\x0f\x4a\xce\xc0\x13\x25\xe7\x26\xd5\x36\xda\x71\xe1\xc8\x2f\x98\xe6\xcb\xf4\x60\xdd\x2d\x18\xaf\x89\x2a\x91\xe2\x9d\x78\x8a\xbc\x8c\xfa\xd8\xc4\x17\xe1\x09\x42\xbd\x0e\xcf\x31\x85\x33\x31\x88\xfa\xcf\xcf\x1f\x4a\xe6\xd8\x31\x29\x59\x1d\x51\xff\xfe\x95\x06\xc6\x43\x59\x4a\x5a\x77\xfb\xac\xe8\xa7\xeb\xdc\xe3\xda\x91\xea\xb4\x7b\x64\xce\xe7\x62\x19\x5e\xd1\xeb\xc4\xce\x78\x2c\x6e\x48\x1c\xee\xfe\x39\xfc\x3f\x32\xbc\x16\x69\xd6\xf5\x74\x05\xb8\xb0\x8b\xc5\x34\x01\x51\x9f\x6d\x36\x4a\xb6\xa7\x07\xf0\x7d\xbd\xdf\x97\x9f\x90\x48\x37\xd3\xc8\xfa\x03\x18\xbd\x52\x6e\xe3\xfd\xea\x9b\x6c\x53\x7a\x2f\x65\xe3\xb8\x1d\xb6\xa5\x89\x9d\x4c\x69\x1b\xd3\x8d\x16\xf5\x55\xeb\x08\x1c\x81\x86\x06\x03\x26\xcd\x68\xe1\x6c\xb3\x81\xec\xad\x52\x49\x7d\xbc\xa6\x59\x8b\xe5\xbc\x8b\x91\x8f\x37\xcc\xe3\x78\xe7\x62\xf2\x97\xc1\x05\xe3\x07\xeb\x42\x03\x8e\x69\xdd\x26\xd0\xc1\xc2\x64\x77\xb8\x73\xde\x43\x88\x0c\x5b\x04\xeb\xa8\xf7\x7a\x44\xfb\x8a\x35\xff\x62\x80\x31\x0e\x09\xfa\x14\xed\x60\xd8\xc5\x00\xe4\x18\xa9\x84\xeb\x38\x40\x37\x10\x03\xf5\x68\xdc\x6e\x9c\x71\x66\x20\x8e\x1d\x2c\x3b\x36\x55\x43\xe5\x4b\x7f\xfd\xd3\xf8\xda\xad\x92\xf3\xce\xa8\x69\xdf\xeb\xbf\x01\x00\x00\xff\xff\x55\xba\x3b\x13\x4f\x04\x00\x00")

func staticDefaultPages700700HtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticDefaultPages700700Html,
		"static/default-pages/700/700.html",
	)
}

func staticDefaultPages700700Html() (*asset, error) {
	bytes, err := staticDefaultPages700700HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/default-pages/700/700.html", size: 1103, mode: os.FileMode(420), modTime: time.Unix(1516599609, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticDefaultPagesFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x7b\x50\x53\xd9\x19\x3f\x88\xc5\xe9\xd4\x2a\x1d\xa7\xb6\xd3\xfa\x6a\xeb\x73\x6a\xdb\xe9\xdb\x5a\x5b\xda\x69\xad\x4e\xc7\xf1\xde\xf8\xc2\xd5\x55\x11\x1f\x10\x59\x79\xb8\x3e\x10\x41\x70\x0d\xb2\xb2\x10\x24\x3c\x02\x12\x14\x79\x18\x10\xf0\x01\x28\xa2\x06\x10\x5c\x45\x0d\x24\x01\x24\x09\x7e\x37\x86\xc0\x5d\x88\x18\x08\x2c\x64\xa3\x3c\xee\xce\xcd\x0d\x21\x09\x11\x22\xee\x1f\x9e\x39\x90\x73\xbe\xfb\xfb\x7e\xe7\xf1\xfd\xce\x39\x1f\x42\x2e\x68\x0a\x72\x77\xa7\x7f\x7f\x8a\x7c\x5d\x11\x5a\x8c\x10\x5a\xb0\x80\xe9\xe7\x4e\x47\x88\xeb\x8a\xd0\x52\x84\x90\x3b\x6d\x47\x8c\xdd\x54\x5c\x91\xa3\x42\x71\xc6\xab\x76\x98\x09\xf1\x63\xdd\xed\x2c\x90\xfc\x4b\xa6\xd1\x9c\x33\x65\xfc\xb1\xe0\xd4\x26\xfa\x7f\xec\x0a\xe0\xfd\x1a\x52\xe6\x12\xe9\xee\x14\x07\xc9\x2f\xbb\x8e\xc5\x6b\xb3\x6e\xd1\xc8\x63\x01\x66\xc7\xa8\xd5\xc0\xfd\x2b\xd3\x26\x2e\xfc\x90\xe2\xa0\xd6\xea\x0d\x76\xfc\xe0\x9b\x08\xfe\x91\x63\x27\x0c\x49\x8b\x88\xb4\xd9\x76\xfc\x6a\xff\x0a\xd8\x95\x07\xfb\xd2\xc0\x8f\x6b\x03\x3e\xb3\x06\x62\x56\x02\x6f\xb9\x26\x7f\xad\x35\xbe\x79\xc3\x53\xe3\x8b\xaf\xcd\x18\x9f\x24\x73\x23\xf8\x20\xd3\x30\x6a\x9f\x43\xdc\x5f\xc6\xae\x77\x94\xd6\x3b\x13\x7c\x13\xc7\x89\x45\x19\x2e\xbb\x8f\x4b\xc5\xac\xba\x67\x2c\xb1\xe5\xeb\x50\xff\x6b\x38\x10\x0b\x01\xa7\xe0\xe8\x21\x38\xb1\x8f\xe2\xa0\xe1\x81\xd7\x16\xfe\x37\x7d\x83\x22\x5c\xa6\xc9\x6d\xb7\x26\x6c\xe7\x55\xc2\x7e\xfe\xd8\x78\x9d\xc7\x14\x14\x07\x5d\xc5\x1b\x19\x63\xbf\xca\x30\xd8\x37\x68\x9e\xdb\x8e\x42\x7a\x20\x36\x6f\x6c\x7c\x05\x26\xaf\x16\x51\xf7\x6d\xbc\xbe\x9a\x25\xed\x57\x19\x68\xfc\xc6\x87\xe3\xeb\xe1\x22\x26\x67\xa6\x77\x0f\x97\x39\xa3\x1f\x67\xe4\xea\x7c\xa1\x28\xe6\x6f\xa8\x02\xa1\xbe\xdf\x21\xd4\xe4\x87\x50\x7b\x3b\x42\xd5\xd5\x08\xd5\x16\x23\x34\x1c\x8e\x50\xf5\x67\x08\xb5\x4a\x10\x6a\xda\xc3\x60\x86\x3c\x46\xfd\x96\x9a\xcf\xd8\xbf\xac\xcf\xd9\xf4\x49\x9c\xb3\xf7\xac\x1f\x14\x7f\x73\x8e\x8b\x42\x38\xf5\x3b\xe7\xd7\xe4\xaf\x66\x1a\xc4\x25\x37\x22\xdb\x6c\x54\x96\x2c\x72\x52\x14\xe3\x63\xfa\x40\x04\x09\x4b\x7a\x15\x57\x68\x7e\xc1\x8f\x88\x8b\x3f\xa0\xef\x95\x47\x5e\x8a\xcb\xae\xdf\x74\x4b\xdf\x9f\x5f\x5b\xc6\x81\xb8\xdf\x43\xc2\x32\x4d\xde\x3a\x48\x99\x43\xa4\xcd\x6e\xc9\x5b\x4e\x64\x7c\x9f\xc8\x76\xe9\x21\x32\x26\xc7\x4f\x5e\x88\x84\x88\x2d\x96\x6e\x6b\x86\x37\x70\xff\x04\xf1\xbf\x85\x84\x25\xc0\xff\x05\xa4\xfc\x8c\x10\xfc\xb8\x43\xb4\xd5\x02\x90\x0b\xa7\xaa\xca\xff\xeb\x3c\x3f\x84\xf8\x42\xe8\xee\x5e\x49\xd5\xa8\x25\xda\x03\x62\x57\x42\xdc\x1f\x80\xb7\x1c\x12\x17\x03\x7f\xbe\xe5\xd3\xab\x27\x41\x90\xe3\xa2\xb0\xba\x9e\xdf\xc6\x0f\x7e\x31\xe6\xc6\xe1\x63\x70\x34\x10\x8e\x1f\xb0\x19\x34\x6a\x2d\x9c\xfd\x37\xc4\xfc\x1d\xb8\x7f\xb6\xb6\x13\x82\x59\x44\xc6\xf4\x96\xc2\x85\x4c\xb7\x29\xf7\x7b\x0e\xf9\x0d\x8a\xaf\x60\x3f\x1f\xd8\xf1\x9d\x05\x22\x5d\x69\x25\x1c\x3a\x01\x87\x8f\xd8\xaf\x8b\xb3\x0e\xa2\xfe\x67\x6f\xe4\xcf\x25\xce\xff\xa4\x4f\x5d\xd2\x21\xda\x4c\x64\x4d\x69\xce\x71\x31\x76\x49\xdf\xb6\x3f\xda\x8b\xf7\xc1\x27\x19\xfc\x62\xe1\x60\x14\x04\x9e\xea\xbc\x56\x6c\x43\x15\xe1\x49\x66\x86\xda\x48\x37\x7b\x33\x24\x2c\x03\xfe\xaf\x20\xe5\xe7\x84\x60\x56\x97\xe4\x8c\x53\xfb\xbf\x3f\x05\xd8\x3c\xf0\xfb\xc2\xee\xa5\x22\x05\x67\xc9\x0b\x36\x16\xfa\x15\xe2\xfe\x11\xe2\x7f\x03\x09\x4b\x26\xdc\x7f\x5d\x01\xc0\xc7\x37\x60\x67\x01\x78\x67\xc1\x5e\x01\xf8\xf0\x81\x7d\x6e\xc8\x60\x1c\xe5\x4f\xe5\xb5\x67\x25\x5b\xba\x03\x7a\x2d\xfd\xa2\x46\x7b\x00\xf7\x6f\x8c\x86\x21\x79\xa1\xbe\x3e\xcd\x21\xbf\xbe\xb8\x03\x36\x55\x83\xa7\x08\xb6\x95\xc2\x8e\xab\xe0\x95\x0b\xde\x97\xc8\x98\x62\xf0\x49\x82\x03\xb1\x66\xfe\xa4\x54\xdd\x9d\x32\xf3\xcc\x4f\xee\x84\x88\x2d\x64\x66\x28\x44\xfe\x1f\x3e\xff\x0f\x44\xff\x63\x44\xc3\x4b\x0d\x64\x8d\xc3\xf9\x2b\x37\x88\x61\x63\x4d\x6f\x65\x87\xdd\x32\xd5\xc7\x2f\x03\x3b\x7e\xc8\x60\x24\x79\x99\xba\xdb\xe5\x46\x92\x84\x63\x41\x64\x1a\xd7\x0e\xa6\x17\xe7\x33\x1a\x7e\xa7\xf3\x3b\x7a\xca\x4e\x17\x82\x6f\x02\xf8\xc5\x90\xbc\x6c\x27\x5d\x9c\xe7\x37\xc8\x5f\xc2\xee\x1c\xd8\x9b\x6e\x0a\x7d\xfc\x80\x4e\x3f\x09\xfe\x4a\x5c\xfa\x80\x25\x6d\xb3\x7d\xea\x29\x0e\x52\xed\xae\x82\x6d\x37\x87\xfa\xdf\x90\x51\xe5\xba\xeb\x32\xfa\x19\xf7\x49\x56\x87\xa5\xd9\xc1\x3a\x4b\x84\x10\xb6\x0b\x22\x3c\x1d\xf2\x2b\x85\xda\xdb\x78\xfd\x3d\x5c\x56\x89\x4b\x1f\xb1\x24\x4f\x58\x75\x12\x56\xad\x2a\x54\xa9\x60\x89\x55\x3b\xcc\xc9\x08\xc9\x79\xa8\xbb\xda\x34\xaa\x61\x5f\x9e\xe6\x4c\x06\xf8\x47\x42\x60\x38\x7c\x1a\x0c\x47\x03\xe0\x38\x1b\x4e\x78\xf7\xd6\x99\x2f\x16\xeb\x3c\x85\xce\x4a\x1e\xf7\x96\xe0\x0d\x77\xf0\xfa\x0a\x5c\xf6\x80\x25\xad\x61\x49\xc4\xac\x3a\x1b\xfd\x47\x48\xda\x63\x24\x96\xae\x69\x21\xb4\x86\xe1\x93\x68\xf0\x3f\x0d\x87\x42\xe0\xc8\x11\x23\xd9\x66\xb7\x45\x63\xf7\xad\x14\xaf\xbf\x6b\x5a\xc8\x03\x96\xc4\x86\x3f\x4c\x4e\x9e\x6c\xb0\x39\x5f\xde\x97\xe8\xec\x8f\xd6\xb0\xbd\x9c\x1c\xf2\xdf\x0d\x51\x5f\xc1\x9e\xdd\xdc\x2e\x2f\xc1\x1b\xca\xf0\xfa\x66\x01\x69\xfd\xb5\x91\x25\xd6\x84\x29\xad\x2d\xed\xe7\x1e\x82\x97\x10\xf6\x64\xc0\xbe\x54\x60\xc7\x33\xf9\xac\x43\x7e\xf9\xbd\x9e\x54\x4c\x91\x8e\xc9\xe5\x45\xba\x06\xe1\xcb\x02\xbc\xf1\xc6\x48\x9a\x66\xa9\x62\x56\xad\x8c\x55\x6b\x67\x34\x1d\xf9\xfc\xbe\x5a\x4d\x57\x51\x2d\x7d\x77\xb1\xe3\x8c\x6d\x5a\x87\xf3\xef\xd1\xbe\x61\x1a\xe9\x98\x3c\x13\x6b\x12\x62\xcf\xac\x79\xca\x71\x59\x95\x29\xf4\x4f\x6d\x83\x02\x9b\x2b\x61\xeb\x1d\xd8\x5e\xc4\x74\x8d\x1a\xdd\x84\xfb\xcf\xc7\x94\xe7\x31\x45\x4b\x4d\xaf\xc5\x52\x84\x37\xdc\x32\x05\xa5\xc2\xa4\xe1\xc7\x56\x71\xe9\xa6\x2f\x96\x2f\xc1\xb3\xdc\x99\xfd\x67\xea\x23\xa1\xae\x30\xa4\xd5\xd2\xcd\xfb\x48\x71\x05\x6b\xbc\x86\x37\x16\xe3\x0d\x16\x0d\xcb\x82\x14\x16\x80\x26\x4c\xd9\x95\xd7\xe6\x3c\xbf\x75\x2d\x08\x78\x21\xc0\x14\x59\x58\x53\x4d\x3c\x99\x8f\x37\x5e\xc7\x1b\xab\x82\x9e\x33\x1a\x56\xf2\x34\xe3\xfb\x3a\xc3\xff\x52\x65\x4c\x5a\xaf\x7c\xa5\xa2\x6f\xe9\x6c\xac\x29\xd7\x14\x14\x8d\xa8\xbb\x14\xaf\x1f\x18\xc9\xcd\xdf\x87\x9f\xbe\x37\x04\x9d\x4c\x43\x80\x29\x32\x4c\x59\x39\xc5\x41\x8f\xa3\x5a\x26\x74\x7c\xd7\xfc\x30\x71\xbd\x32\x15\x53\x38\x8f\x9f\x44\x5e\xff\xa1\x15\x6a\xa4\x0c\x87\x53\x94\x21\x80\xa2\x34\x6b\x28\x4a\x3d\x8d\x1a\x0e\x9c\x11\x3e\xbc\x62\x4e\xb8\x61\xd5\xaa\x00\xf5\x3f\x43\xa7\x19\xe7\x05\xcf\x1f\x9e\x17\x1c\xae\x9f\x11\x38\x53\xed\xe6\x35\xad\x47\x3f\x33\x8e\x1a\xf4\xa0\x28\xe3\x7c\x8a\x6e\xab\xdd\xbc\xdc\xf4\xf3\x02\x67\xd2\x18\x1a\x4b\xfb\xd0\xbe\x34\x07\xcd\x45\x73\x9a\xb8\xe9\x31\xe8\xb1\xcc\xe5\xdb\x00\x00\x00\xff\xff\x69\x1f\xf8\xa4\x36\x10\x00\x00")

func staticDefaultPagesFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticDefaultPagesFaviconIco,
		"static/default-pages/favicon.ico",
	)
}

func staticDefaultPagesFaviconIco() (*asset, error) {
	bytes, err := staticDefaultPagesFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/default-pages/favicon.ico", size: 4150, mode: os.FileMode(420), modTime: time.Unix(1517435208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticDefaultPagesStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x73\xe2\x30\x0c\xbd\xf3\x2b\x34\x30\x9d\x69\x3b\x35\x4d\x80\x2c\xad\xb9\xef\xff\x70\x62\x25\x71\x71\xac\x8c\xe3\xf0\xb1\x3b\xfd\xef\x3b\x71\x4c\x92\x52\xb6\xdb\xc3\xc2\x81\x41\x96\x9f\xdf\xd3\x93\x54\xba\x4a\xc3\xef\x19\x00\x40\x4d\x8d\x72\x8a\x0c\x07\x8b\x5a\x38\x75\xc0\x9d\x8f\x57\xca\xb0\x12\x55\x51\x3a\x0e\x71\x14\xdd\xed\x66\xef\xb3\x59\x4a\xf2\x1c\xee\x3d\x3f\xa6\x22\xdb\x17\x96\x5a\x23\x99\xaa\x44\x81\x1c\x5a\xab\xef\xe7\x63\x78\xf9\x56\x17\xf3\x87\xdd\xe3\xb3\xbf\x90\x93\x71\x2c\x17\x95\xd2\x67\x0e\x73\x4b\x29\x39\x62\x16\x8b\x56\x0b\x3b\x7f\x82\x46\x98\x86\x35\x68\x55\xde\xbf\x3f\x41\xcf\x48\x93\xe5\x70\x2c\x95\x0b\xe4\x3c\x56\xa3\x7e\x21\x87\xd8\x62\xd5\x07\xb5\x32\x38\x52\x5e\x26\xfe\xa0\xd7\x22\x6c\xa1\x0c\x87\x08\xa2\x4e\x4b\x7d\xea\x2f\xd4\x42\x4a\x65\x0a\x0e\xab\xa4\x0b\xbd\xcf\x66\xcb\x4a\x28\xc3\x32\x32\x0e\x8d\x83\x32\x0e\x5a\x6f\x52\x4f\xb5\xc8\xf6\x37\x88\x3b\x3c\x39\xe6\xac\x30\x4d\x4e\xb6\xe2\xd0\xd6\x35\xda\x4c\x34\x81\xba\x46\xe7\xd0\xb2\xa6\x16\x99\x7f\x9b\x2d\x57\x83\x82\x89\xac\x1f\x7f\x91\xb5\x9b\x08\x62\x29\x39\x47\x55\x27\x76\xc4\x08\xa2\x98\xa3\x7a\xac\xc2\x57\x46\x87\xea\x2e\x56\x3f\xbb\xef\xcd\x32\x70\x9e\x62\x4e\x16\x43\x39\xc2\x01\x87\xf9\xbc\x87\x90\xaa\xa9\xb5\x38\x73\x48\x35\x65\xfb\x6b\xff\x38\x2c\xf2\x7c\xb3\x59\x27\xfd\xc1\x51\x49\x57\x72\x88\x57\x83\x0f\x17\x71\xeb\xc1\x98\x81\xaa\x48\x1b\xd2\xed\xc5\x76\xaf\x29\xba\x41\xb1\x0e\xcc\x2a\x71\x62\x01\x7f\xf3\x32\xe0\x7b\x47\x84\x56\x85\xe1\xf0\xd6\x36\x4e\xe5\xe7\xc9\x41\x88\x70\x50\xa6\x33\xe6\x48\x56\xfa\x17\x72\x22\x87\x76\x90\xec\x8b\x54\x58\x71\xfe\x9a\xe2\xc5\x92\xe8\xa3\x58\x3f\x40\xd7\x63\x75\xd3\xf8\x68\xb9\x1d\x3d\x1b\x07\xb0\x9f\xbf\xa5\xa5\x63\x60\x14\x90\x5f\x07\xe0\x51\x7a\x1c\x6f\x07\xed\x63\xeb\x8b\xd6\x91\x07\x29\x51\xc8\x41\x58\xe8\x24\x5f\xd9\x24\xaa\x4f\x93\x84\xa5\xa6\x82\x42\xda\xe0\xb0\x13\xa9\xc6\xdb\x8d\xae\xe9\x38\x6d\xf4\x69\x03\x74\x3d\x2c\x2c\x2b\xac\x90\x0a\x8d\xbb\x5f\xaf\x23\x89\xc5\x13\x2c\x5e\x92\x3c\x17\x1b\x88\xee\x9e\x60\x91\x6c\x30\xda\x4a\x58\x25\xdd\x9f\x18\x5f\x73\x8c\x20\xf1\x27\xd9\xeb\xe6\x05\x23\xd8\xfa\x13\x8c\x92\x55\xb2\xf2\x25\x7d\xe8\x5f\x62\x47\x4c\xf7\xca\xb1\xe9\xca\xd0\xaa\xe6\x9e\xe1\xc7\x14\xcf\x39\x57\x5a\x5f\x96\x8a\xe7\x5f\x0b\x8b\xc6\x5d\x2d\x85\x38\xaa\x4f\x7e\x5f\x74\x3f\xd7\x65\x61\x2a\x23\x73\x55\x1b\x5f\x1a\x96\xa1\xd6\x3d\xd2\x01\xad\x53\x99\xd0\xa1\xf5\x2a\x25\xa5\xfe\xbc\xbf\x36\xde\xec\x6b\xf8\x8e\x67\x80\xff\x1e\x4c\x3c\x6d\x1b\x1f\x3f\x86\xde\x49\x49\xf7\x0d\x9d\x91\xbc\x4c\x70\x4a\x56\xa2\x65\x9d\x1d\x6d\xc3\x21\xf9\xb4\x11\x87\xc8\x87\x31\x46\xff\xe9\x3b\x31\xa5\xd3\x7f\x03\x13\x5c\x2b\xb3\x0f\x70\xde\x22\x89\x19\x59\xd1\x0f\x98\x21\x73\x49\x3b\xa8\x46\x39\x94\xdf\xc8\x2c\xe9\x30\xf4\xf8\x57\x79\x22\xeb\x36\xe1\x3f\x12\xff\x04\x00\x00\xff\xff\x3d\x0c\x10\xca\x2f\x07\x00\x00")

func staticDefaultPagesStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticDefaultPagesStyleCss,
		"static/default-pages/style.css",
	)
}

func staticDefaultPagesStyleCss() (*asset, error) {
	bytes, err := staticDefaultPagesStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/default-pages/style.css", size: 1839, mode: os.FileMode(420), modTime: time.Unix(1516599719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/default-pages/.DS_Store": staticDefaultPagesDs_store,
	"static/default-pages/404/404.html": staticDefaultPages404404Html,
	"static/default-pages/700/700.html": staticDefaultPages700700Html,
	"static/default-pages/favicon.ico": staticDefaultPagesFaviconIco,
	"static/default-pages/style.css": staticDefaultPagesStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"default-pages": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{staticDefaultPagesDs_store, map[string]*bintree{}},
			"404": &bintree{nil, map[string]*bintree{
				"404.html": &bintree{staticDefaultPages404404Html, map[string]*bintree{}},
			}},
			"700": &bintree{nil, map[string]*bintree{
				"700.html": &bintree{staticDefaultPages700700Html, map[string]*bintree{}},
			}},
			"favicon.ico": &bintree{staticDefaultPagesFaviconIco, map[string]*bintree{}},
			"style.css": &bintree{staticDefaultPagesStyleCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

